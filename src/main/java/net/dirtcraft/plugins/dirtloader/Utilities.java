package net.dirtcraft.plugins.dirtloader;

import net.dirtcraft.plugins.dirtloader.commands.BaseCommand;
import net.dirtcraft.plugins.dirtloader.listeners.PlayerListener;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;

public class Utilities {
	public static FileConfiguration config;
	private static File configFile = new File(DirtLoader.plugin.getDataFolder(), "config.yml");

	static {
		config = YamlConfiguration.loadConfiguration(new File(DirtLoader.plugin.getDataFolder(), "config.yml"));
	}

	public static void createConfigFile() {
		// ------------------------- Config File -------------------------
		config.options().header(
				"DirtLoader configuration file."
						+ "\nThis file is automatically generated and contains configurable options."
						+ "\n!! Do not edit this file unless you know what you are doing !!"
						+ "\n\ngeneral:"
						+ "\n  - online: The amount of online chunks new players get. (default: 3)"
						+ "\n  - offline: The amount of offline chunks new players get. (default: 0)"
						+ "\n  - play-success-sound: Whether or not to play a sound when a player loads a chunk. (default: true)"
						+ "\n  - success-sound: The sound to be played. (default: minecraft:entity.experience_orb.pickup)"
						+ "\n  - play-failure-sound: Whether or not to play a sound when a player fails to load a chunk. (default: true)"
						+ "\n  - failure-sound: The sound to be played. (default: minecraft:entity.creeper.death)"
						+ "\n  - player-add-message: Whether or not to send a message to the player when chunks are added to their balance. (default: true)"
						+ "\n  - player-remove-message: Whether or not to send a message to the player when chunks are removed from their balance. (default: true)"
						+ "\n  - max-list-entries-per-page: The maximum amount of entries to be shown per page in the /dl list command. (default: 5)"
						+ "\n  - teleport-command: The tp command that should be used when teleporting to a chunk. Players need permission to execute this command! (default: /minecraft:tp)"
						+ "\n\noffline:"
						+ "\n  -duration: How long (in hours) does the offline chunk stay loaded after the player left. (default: 12)"
						+ "\n\ndebug-messages: Whether or not to show debug messages. (default: true)"
						+ "\n"
		);
		config.addDefault("general.online", 3);
		config.addDefault("general.offline", 0);
		config.addDefault("general.play-success-sound", true);
		config.addDefault("general.success-sound", "minecraft:entity.experience_orb.pickup");
		config.addDefault("general.play-failure-sound", true);
		config.addDefault("general.failure-sound", "minecraft:entity.creeper.death");
		config.addDefault("general.player-add-message", true);
		config.addDefault("general.player-remove-message", true);
		config.addDefault("general.max-list-entries-per-page", 5);
		config.addDefault("general.teleport-command", "/minecraft:tp");
		config.addDefault("offline.duration", 12);
		config.addDefault("debug-messages", true);
		config.options().copyDefaults(true);
		config.options().copyHeader(true);
		saveConfigFile();
	}

	public static void generatePlayerFile(Player player) {
		File file = new File(DirtLoader.plugin.getDataFolder() + "/playerdata", player.getUniqueId() + ".yml");
		if (!file.exists()) {
			if (config.getBoolean("debug-messages")) {
				DirtLoader.plugin.getLogger().log(Level.INFO, "Creating player file for " + player.getName());
			}
			final FileConfiguration playerFile = YamlConfiguration.loadConfiguration(file);
			playerFile.addDefault("name", player.getName());
			playerFile.addDefault("available.online", config.get("general.online"));
			playerFile.addDefault("available.offline", config.get("general.offline"));
			playerFile.addDefault("original.online", config.get("general.online"));
			playerFile.addDefault("original.offline", config.get("general.offline"));
			playerFile.addDefault("used.online", 0);
			playerFile.addDefault("used.offline", 0);
			playerFile.addDefault("chunks", new ArrayList<String>());
			playerFile.options().copyDefaults(true);

			savePlayerFile(playerFile, file, player);
		}
	}

	public static void savePlayerFile(FileConfiguration playerFile, File file, Player player) {
		try {
			playerFile.save(file);
		} catch (IOException e) {
			DirtLoader.plugin.getLogger().log(Level.SEVERE, "Could not save player file for " + player.getName() + "!");
		}
	}

	public static FileConfiguration getPlayerFile(Player player) {
		File file = new File(DirtLoader.plugin.getDataFolder() + "/playerdata", player.getUniqueId() + ".yml");
		if (!file.exists()) {
			generatePlayerFile(player);
		}
		return YamlConfiguration.loadConfiguration(file);
	}

	public static void saveConfigFile() {
		if (config == null || configFile == null) {
			return;
		}
		try {
			config.save(configFile);
		} catch (IOException ex) {
			DirtLoader.plugin.getLogger().log(Level.SEVERE, "Could not save config file to " + configFile, ex);
		}
	}

	public static void reloadConfigFile() {
		if (configFile == null) {
			configFile = new File(DirtLoader.plugin.getDataFolder(), "config.yml");
		}
		config = YamlConfiguration.loadConfiguration(configFile);
	}

	public static void registerListener() {
		DirtLoader.plugin.getServer().getPluginManager().registerEvents(new PlayerListener(), DirtLoader.plugin);
	}

	public static void registerCommands() {
		DirtLoader.plugin.getCommand("dl").setExecutor(new BaseCommand());
		DirtLoader.plugin.getCommand("dl").setTabCompleter(new BaseCommand());
	}
}
